unittest1.c:
UNIT TEST supplyCount():
Test 0 - after 0 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 1 - after 1 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 2 - after 2 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 3 - after 3 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 4 - after 4 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 5 - after 5 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 6 - after 6 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 7 - after 7 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 8 - after 8 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 9 - after 9 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
All tests passed
File 'dominion.c'
Lines executed:18.79% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      165:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      155:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       10:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
        4:  118:          if (numPlayers == 2)
        -:  119:          {
        2:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        8:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       10:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      145:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       70:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       50:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
       10:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       10:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       25:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       25:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       25:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       25:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       25:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       25:  672:    state->deckCount[player]--;
       25:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       25:  676:  return 0;
        -:  677:}
        -:  678:
    #####:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       10:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       40:  744:  while (drawntreasure < 2)
        -:  745:  {
       20:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       20:  750:    drawCard(currentPlayer, state);
       20:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       20:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       20:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       20:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       10:  766:  return 0;
        -:  767:}
        -:  768:
    #####:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
    #####:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
    #####:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
    #####:  779:  discardCard(handPos, currentPlayer, state, 0);
    #####:  780:  return 0;
        -:  781:}
        -:  782:
    #####:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
    #####:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
    #####:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
    #####:  793:  discardCard(handPos, currentPlayer, state, 0);
    #####:  794:  return 0;
        -:  795:}
        -:  796:
    #####:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
    #####:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
    #####:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
    #####:  807:  discardCard(handPos, currentPlayer, state, 0);
    #####:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       10:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       10:  837:  int currentPlayer = whoseTurn(state);
       10:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       10:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       10:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       10:  844:  int z = 0; // this is the counter for the temp hand
       10:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       10:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       10:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
    #####:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
    #####:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
    #####:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
    #####:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
    #####:  890:      if (i != currentPlayer)
        -:  891:      {
    #####:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
    #####:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
    #####:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
    #####:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
    #####:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
    #####:  912:    updateCoins(currentPlayer, state, 5);
    #####:  913:    x = 1; //Condition to loop on
    #####:  914:    while (x == 1)
        -:  915:    { //Buy one card
    #####:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
    #####:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
    #####:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
    #####:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
    #####:  956:      state->hand[currentPlayer][i] = temphand[i];
    #####:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
    #####:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
    #####:  964:    return -1;
        -:  965:
        -:  966:  case mine:
    #####:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
    #####:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
    #####:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
    #####:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
    #####:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
    #####: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
    #####: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
    #####: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
    #####: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
    #####: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
    #####: 1054:    state->numBuys++; //Increase buys by 1!
    #####: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
    #####: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
    #####: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1105:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
    #####: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
    #####: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
    #####: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
    #####: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
    #####: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
    #####: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
    #####: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
    #####: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
    #####: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
    #####: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
    #####: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
    #####: 1488:  return 0;
        -: 1489:}
        -: 1490:
    #####: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
    #####: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
    #####: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
    #####: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
    #####: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
    #####: 1525:  return 0;
        -: 1526:}
        -: 1527:
        1: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
        1: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
        6: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
        5: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
        4: 1540:      state->coins += 1;
        -: 1541:    }
        1: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
        1: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
        1: 1553:  state->coins += bonus;
        -: 1554:
        1: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
unittest2.c:
UNIT TEST whoseTurn():
Test 1 - whose turn at beginning of game
Test 2 - whose turn after kingdom card 0, called using cardEffect()
Test 3 - whose turn after kingdom card 1, called using cardEffect()
Test 4 - whose turn after kingdom card 2, called using cardEffect()
Test 5 - whose turn after kingdom card 3, called using cardEffect()
Test 6 - whose turn after kingdom card 4, called using cardEffect()
Test 7 - whose turn after kingdom card 5, called using cardEffect()
Test 8 - whose turn after kingdom card 6, called using cardEffect()
Test 9 - whose turn after kingdom card 7, called using cardEffect()
Test 10 - whose turn after kingdom card 8, called using cardEffect()
Test 11 - whose turn after kingdom card 9, called using cardEffect()
All tests passed
File 'dominion.c'
Lines executed:32.76% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       60:    8:int compare(const void *a, const void *b)
        -:    9:{
       60:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       60:   12:  if (*(int *)a < *(int *)b)
       16:   13:    return -1;
       44:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        2:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        2:   48:  SelectStream(1);
        2:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        2:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      220:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      200:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        2:   76:  if (numPlayers == 2)
        -:   77:  {
        2:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        2:   90:  if (numPlayers == 2)
        -:   91:  {
        2:   92:    state->supplyCount[estate] = 8;
        2:   93:    state->supplyCount[duchy] = 8;
        2:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        2:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  105:  state->supplyCount[silver] = 40;
        2:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       42:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      330:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      310:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       20:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
        8:  118:          if (numPlayers == 2)
        -:  119:          {
        4:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       16:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       20:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      290:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        6:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        4:  146:    state->deckCount[i] = 0;
       16:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       12:  149:      state->deck[i][j] = estate;
       12:  150:      state->deckCount[i]++;
        -:  151:    }
       32:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       28:  154:      state->deck[i][j] = copper;
       28:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        6:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        4:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        6:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        4:  172:    state->handCount[i] = 0;
        4:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       56:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       54:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        2:  188:  state->outpostPlayed = 0;
        2:  189:  state->phase = 0;
        2:  190:  state->numActions = 1;
        2:  191:  state->numBuys = 1;
        2:  192:  state->playedCardCount = 0;
        2:  193:  state->whoseTurn = 0;
        2:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       12:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       10:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        2:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        2:  205:  return 0;
        -:  206:}
        -:  207:
        4:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        4:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        4:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        4:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       48:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       40:  223:    card = floor(Random() * state->deckCount[player]);
       40:  224:    newDeck[newDeckPos] = state->deck[player][card];
       40:  225:    newDeckPos++;
      140:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      100:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       40:  230:    state->deckCount[player]--;
        -:  231:  }
       44:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       40:  234:    state->deck[player][i] = newDeck[i];
       40:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        4:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
       20:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       20:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       41:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       41:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       41:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       41:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       41:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       41:  672:    state->deckCount[player]--;
       41:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       41:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       11:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       44:  744:  while (drawntreasure < 2)
        -:  745:  {
       22:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       22:  750:    drawCard(currentPlayer, state);
       22:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       22:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       22:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       22:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       11:  766:  return 0;
        -:  767:}
        -:  768:
        1:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
        3:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
        2:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        1:  779:  discardCard(handPos, currentPlayer, state, 0);
        1:  780:  return 0;
        -:  781:}
        -:  782:
        1:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        1:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        1:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        1:  793:  discardCard(handPos, currentPlayer, state, 0);
        1:  794:  return 0;
        -:  795:}
        -:  796:
        1:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        1:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        1:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        1:  807:  discardCard(handPos, currentPlayer, state, 0);
        1:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       20:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       20:  837:  int currentPlayer = whoseTurn(state);
       20:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       20:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       20:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       20:  844:  int z = 0; // this is the counter for the temp hand
       20:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       20:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       11:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        1: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        1: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        1: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
        4: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
        4: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
        4: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
        4: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
        4: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
        4: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
        4: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
        4: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
        4: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
        4: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
        3: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
        3: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
       18: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
       15: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
        8: 1540:      state->coins += 1;
        -: 1541:    }
        7: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
        7: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
        3: 1553:  state->coins += bonus;
        -: 1554:
        3: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
unittest3.c:
UNIT TEST isGameOver():
Test 1 - initial game state
Test 2 - stack of province cards in empty
8Test 3 - three supply piles are empty
All tests passed
File 'dominion.c'
Lines executed:34.48% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void *a, const void *b)
        -:    9:{
      180:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      180:   12:  if (*(int *)a < *(int *)b)
       48:   13:    return -1;
      132:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        6:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        6:   48:  SelectStream(1);
        6:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        6:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        6:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       66:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      660:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      600:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        6:   76:  if (numPlayers == 2)
        -:   77:  {
        6:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        6:   90:  if (numPlayers == 2)
        -:   91:  {
        6:   92:    state->supplyCount[estate] = 8;
        6:   93:    state->supplyCount[duchy] = 8;
        6:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        6:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  105:  state->supplyCount[silver] = 40;
        6:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      126:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      990:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      930:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       60:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       24:  118:          if (numPlayers == 2)
        -:  119:          {
       12:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       48:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       60:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      870:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       18:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       12:  146:    state->deckCount[i] = 0;
       48:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       36:  149:      state->deck[i][j] = estate;
       36:  150:      state->deckCount[i]++;
        -:  151:    }
       96:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       84:  154:      state->deck[i][j] = copper;
       84:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       18:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       12:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       18:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       12:  172:    state->handCount[i] = 0;
       12:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      168:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      162:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        6:  188:  state->outpostPlayed = 0;
        6:  189:  state->phase = 0;
        6:  190:  state->numActions = 1;
        6:  191:  state->numBuys = 1;
        6:  192:  state->playedCardCount = 0;
        6:  193:  state->whoseTurn = 0;
        6:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       36:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       30:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        6:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        6:  205:  return 0;
        -:  206:}
        -:  207:
       12:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       12:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       12:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       12:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      144:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      120:  223:    card = floor(Random() * state->deckCount[player]);
      120:  224:    newDeck[newDeckPos] = state->deck[player][card];
      120:  225:    newDeckPos++;
      420:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      300:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      120:  230:    state->deckCount[player]--;
        -:  231:  }
      132:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      120:  234:    state->deck[player][i] = newDeck[i];
      120:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       12:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
       20:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       20:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        6:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        4:  434:  j = 0;
      104:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      100:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        6:  439:      j++;
        -:  440:    }
        -:  441:  }
        4:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       61:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       61:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       61:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       61:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       61:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       61:  672:    state->deckCount[player]--;
       61:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       61:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       11:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       44:  744:  while (drawntreasure < 2)
        -:  745:  {
       22:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       22:  750:    drawCard(currentPlayer, state);
       22:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       22:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       22:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       22:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       11:  766:  return 0;
        -:  767:}
        -:  768:
        1:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
        3:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
        2:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        1:  779:  discardCard(handPos, currentPlayer, state, 0);
        1:  780:  return 0;
        -:  781:}
        -:  782:
        1:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        1:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        1:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        1:  793:  discardCard(handPos, currentPlayer, state, 0);
        1:  794:  return 0;
        -:  795:}
        -:  796:
        1:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        1:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        1:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        1:  807:  discardCard(handPos, currentPlayer, state, 0);
        1:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       20:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       20:  837:  int currentPlayer = whoseTurn(state);
       20:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       20:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       20:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       20:  844:  int z = 0; // this is the counter for the temp hand
       20:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       20:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       11:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        1: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        1: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        1: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
        4: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
        4: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
        4: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
        4: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
        4: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
        4: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
        4: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
        4: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
        4: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
        4: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
        7: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
        7: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
       42: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
       35: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
       24: 1540:      state->coins += 1;
        -: 1541:    }
       11: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
       11: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
        7: 1553:  state->coins += bonus;
        -: 1554:
        7: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
unittest4.c:
UNIT TEST fullDeckCount():
Test 1 - player 1 and each kingdom card
Test 2 - player 2 and each kingdom card
All tests passed!
File 'dominion.c'
Lines executed:35.86% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void *a, const void *b)
        -:    9:{
      240:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      240:   12:  if (*(int *)a < *(int *)b)
       64:   13:    return -1;
      176:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        8:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        8:   48:  SelectStream(1);
        8:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        8:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        8:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       88:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      880:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      800:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        8:   76:  if (numPlayers == 2)
        -:   77:  {
        8:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        8:   90:  if (numPlayers == 2)
        -:   91:  {
        8:   92:    state->supplyCount[estate] = 8;
        8:   93:    state->supplyCount[duchy] = 8;
        8:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        8:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  105:  state->supplyCount[silver] = 40;
        8:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      168:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     1320:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     1240:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       80:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       32:  118:          if (numPlayers == 2)
        -:  119:          {
       16:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       64:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       80:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1160:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       24:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       16:  146:    state->deckCount[i] = 0;
       64:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       48:  149:      state->deck[i][j] = estate;
       48:  150:      state->deckCount[i]++;
        -:  151:    }
      128:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      112:  154:      state->deck[i][j] = copper;
      112:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       24:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       16:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       24:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       16:  172:    state->handCount[i] = 0;
       16:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      224:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      216:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        8:  188:  state->outpostPlayed = 0;
        8:  189:  state->phase = 0;
        8:  190:  state->numActions = 1;
        8:  191:  state->numBuys = 1;
        8:  192:  state->playedCardCount = 0;
        8:  193:  state->whoseTurn = 0;
        8:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       48:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       40:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        8:  205:  return 0;
        -:  206:}
        -:  207:
       16:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       16:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       16:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       16:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      192:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      160:  223:    card = floor(Random() * state->deckCount[player]);
      160:  224:    newDeck[newDeckPos] = state->deck[player][card];
      160:  225:    newDeckPos++;
      560:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      400:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      160:  230:    state->deckCount[player]--;
        -:  231:  }
      176:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      160:  234:    state->deck[player][i] = newDeck[i];
      160:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       16:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
       40:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
       40:  349:  int count = 0;
        -:  350:
      340:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
      300:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
      140:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
      100:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
       40:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
       40:  369:  return count;
        -:  370:}
        -:  371:
       20:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       20:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        6:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        4:  434:  j = 0;
      104:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      100:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        6:  439:      j++;
        -:  440:    }
        -:  441:  }
        4:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       71:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       71:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       71:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       71:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       71:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       71:  672:    state->deckCount[player]--;
       71:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       71:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       11:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       44:  744:  while (drawntreasure < 2)
        -:  745:  {
       22:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       22:  750:    drawCard(currentPlayer, state);
       22:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       22:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       22:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       22:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       11:  766:  return 0;
        -:  767:}
        -:  768:
        1:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
        3:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
        2:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        1:  779:  discardCard(handPos, currentPlayer, state, 0);
        1:  780:  return 0;
        -:  781:}
        -:  782:
        1:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        1:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        1:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        1:  793:  discardCard(handPos, currentPlayer, state, 0);
        1:  794:  return 0;
        -:  795:}
        -:  796:
        1:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        1:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        1:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        1:  807:  discardCard(handPos, currentPlayer, state, 0);
        1:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       20:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       20:  837:  int currentPlayer = whoseTurn(state);
       20:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       20:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       20:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       20:  844:  int z = 0; // this is the counter for the temp hand
       20:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       20:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       11:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        1: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        1: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        1: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
        4: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
        4: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
        4: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
        4: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
        4: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
        4: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
        4: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
        4: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
        4: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
        4: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
        9: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
        9: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
       54: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
       45: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
       32: 1540:      state->coins += 1;
        -: 1541:    }
       13: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
       13: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
        9: 1553:  state->coins += bonus;
        -: 1554:
        9: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
cardtest1.c:
----------------- Testing Card: smithy ----------------
TEST 1: Current player should receive exactly 3 cards
hand count = 6, expected = 7
deck count = 3, expected = 2
hand count failed
deck count failed
TEST 2: 3 cards should come from the player’s own pile
hand count = 6, expected = 7
deck count = 3, expected = 2
hand count failed
deck count failed
TEST 3: No state change should occur for other players
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 4: No state change should occur to the victory card piles and kingdom card piles
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province

 >>>>> SUCCESS: Testing complete smithy <<<<<

File 'dominion.c'
Lines executed:35.86% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      360:    8:int compare(const void *a, const void *b)
        -:    9:{
      360:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      360:   12:  if (*(int *)a < *(int *)b)
       96:   13:    return -1;
      264:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
       12:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       12:   48:  SelectStream(1);
       12:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
       12:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       12:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      132:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
     1320:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
     1200:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       12:   76:  if (numPlayers == 2)
        -:   77:  {
       12:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       12:   90:  if (numPlayers == 2)
        -:   91:  {
       12:   92:    state->supplyCount[estate] = 8;
       12:   93:    state->supplyCount[duchy] = 8;
       12:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       12:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  105:  state->supplyCount[silver] = 40;
       12:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      252:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     1980:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     1860:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      120:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       40:  118:          if (numPlayers == 2)
        -:  119:          {
       20:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      100:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      120:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1740:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       36:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       24:  146:    state->deckCount[i] = 0;
       96:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       72:  149:      state->deck[i][j] = estate;
       72:  150:      state->deckCount[i]++;
        -:  151:    }
      192:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      168:  154:      state->deck[i][j] = copper;
      168:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       36:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       24:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       36:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       24:  172:    state->handCount[i] = 0;
       24:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      336:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      324:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       12:  188:  state->outpostPlayed = 0;
       12:  189:  state->phase = 0;
       12:  190:  state->numActions = 1;
       12:  191:  state->numBuys = 1;
       12:  192:  state->playedCardCount = 0;
       12:  193:  state->whoseTurn = 0;
       12:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       72:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       60:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
       12:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       12:  205:  return 0;
        -:  206:}
        -:  207:
       24:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       24:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       24:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       24:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      288:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      240:  223:    card = floor(Random() * state->deckCount[player]);
      240:  224:    newDeck[newDeckPos] = state->deck[player][card];
      240:  225:    newDeckPos++;
      840:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      600:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      240:  230:    state->deckCount[player]--;
        -:  231:  }
      264:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      240:  234:    state->deck[player][i] = newDeck[i];
      240:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       24:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
       40:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
       40:  349:  int count = 0;
        -:  350:
      340:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
      300:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
      140:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
      100:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
       40:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
       40:  369:  return count;
        -:  370:}
        -:  371:
       24:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       24:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        6:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        4:  434:  j = 0;
      104:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      100:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        6:  439:      j++;
        -:  440:    }
        -:  441:  }
        4:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       99:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       99:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       99:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       99:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       99:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       99:  672:    state->deckCount[player]--;
       99:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       99:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       11:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       44:  744:  while (drawntreasure < 2)
        -:  745:  {
       22:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       22:  750:    drawCard(currentPlayer, state);
       22:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       22:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       22:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       22:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       11:  766:  return 0;
        -:  767:}
        -:  768:
        5:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
       15:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
       10:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        5:  779:  discardCard(handPos, currentPlayer, state, 0);
        5:  780:  return 0;
        -:  781:}
        -:  782:
        1:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        1:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        1:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        1:  793:  discardCard(handPos, currentPlayer, state, 0);
        1:  794:  return 0;
        -:  795:}
        -:  796:
        1:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        1:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        1:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        1:  807:  discardCard(handPos, currentPlayer, state, 0);
        1:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       24:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       24:  837:  int currentPlayer = whoseTurn(state);
       24:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       24:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       24:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       24:  844:  int z = 0; // this is the counter for the temp hand
       24:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       24:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       11:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        5: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        1: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        1: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
        8: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
        8: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
        8: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
        8: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
        8: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
        8: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
        8: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
        8: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
        8: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
        8: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
       13: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
       13: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
       78: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
       65: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
       48: 1540:      state->coins += 1;
        -: 1541:    }
       17: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
       17: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
       13: 1553:  state->coins += bonus;
        -: 1554:
       13: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
cardtest2.c:
----------------- Testing Card: adventurer ----------------
TEST 1: Current player reveals cards until they find two treasure cards.
TEST 2: The two treasure cards are placed in the player’s hand
hand count = 7, expected = 4
deck count = 3, expected = 5
hand count failed
deck count failed
TEST 3: The cards should come from the player’s own pile.
hand count = 7, expected = 4
deck count = 3, expected = 5
hand count failed
deck count failed
TEST 5: No state change should occur for other players
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 6: The other revealed cards are discarded
discard count = 0, expected = 1
discard count failed
TEST 7: No state change should occur to the victory card piles and kingdom card piles
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province

 >>>>> SUCCESS: Testing complete adventurer <<<<<

File 'dominion.c'
Lines executed:35.86% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      540:    8:int compare(const void *a, const void *b)
        -:    9:{
      540:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      540:   12:  if (*(int *)a < *(int *)b)
      144:   13:    return -1;
      396:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
       18:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       18:   48:  SelectStream(1);
       18:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
       18:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       18:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      198:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
     1980:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
     1800:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       18:   76:  if (numPlayers == 2)
        -:   77:  {
       18:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       18:   90:  if (numPlayers == 2)
        -:   91:  {
       18:   92:    state->supplyCount[estate] = 8;
       18:   93:    state->supplyCount[duchy] = 8;
       18:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       18:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  105:  state->supplyCount[silver] = 40;
       18:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      378:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     2970:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     2790:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      180:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       52:  118:          if (numPlayers == 2)
        -:  119:          {
       26:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      154:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      180:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     2610:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       54:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       36:  146:    state->deckCount[i] = 0;
      144:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
      108:  149:      state->deck[i][j] = estate;
      108:  150:      state->deckCount[i]++;
        -:  151:    }
      288:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      252:  154:      state->deck[i][j] = copper;
      252:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       54:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       36:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       54:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       36:  172:    state->handCount[i] = 0;
       36:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      504:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      486:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       18:  188:  state->outpostPlayed = 0;
       18:  189:  state->phase = 0;
       18:  190:  state->numActions = 1;
       18:  191:  state->numBuys = 1;
       18:  192:  state->playedCardCount = 0;
       18:  193:  state->whoseTurn = 0;
       18:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      108:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       90:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
       18:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       18:  205:  return 0;
        -:  206:}
        -:  207:
       36:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       36:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       36:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       36:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      432:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      360:  223:    card = floor(Random() * state->deckCount[player]);
      360:  224:    newDeck[newDeckPos] = state->deck[player][card];
      360:  225:    newDeckPos++;
     1260:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      900:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      360:  230:    state->deckCount[player]--;
        -:  231:  }
      396:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      360:  234:    state->deck[player][i] = newDeck[i];
      360:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       36:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
       40:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
       40:  349:  int count = 0;
        -:  350:
      340:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
      300:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
      140:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
      100:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
       40:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
       40:  369:  return count;
        -:  370:}
        -:  371:
       30:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       30:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        6:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        4:  434:  j = 0;
      104:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      100:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        6:  439:      j++;
        -:  440:    }
        -:  441:  }
        4:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
      141:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      141:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      141:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      141:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      141:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      141:  672:    state->deckCount[player]--;
      141:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      141:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       17:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       68:  744:  while (drawntreasure < 2)
        -:  745:  {
       34:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       34:  750:    drawCard(currentPlayer, state);
       34:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       34:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       34:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       34:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       17:  766:  return 0;
        -:  767:}
        -:  768:
        5:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
       15:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
       10:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        5:  779:  discardCard(handPos, currentPlayer, state, 0);
        5:  780:  return 0;
        -:  781:}
        -:  782:
        1:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        1:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        1:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        1:  793:  discardCard(handPos, currentPlayer, state, 0);
        1:  794:  return 0;
        -:  795:}
        -:  796:
        1:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        1:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        1:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        1:  807:  discardCard(handPos, currentPlayer, state, 0);
        1:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       30:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       30:  837:  int currentPlayer = whoseTurn(state);
       30:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       30:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       30:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       30:  844:  int z = 0; // this is the counter for the temp hand
       30:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       30:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       17:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        5: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        1: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        1: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
        8: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
        8: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
        8: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
        8: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
        8: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
        8: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
        8: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
        8: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
        8: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
        8: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
       19: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
       19: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
      114: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
       95: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
       72: 1540:      state->coins += 1;
        -: 1541:    }
       23: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
       23: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
       19: 1553:  state->coins += bonus;
        -: 1554:
       19: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
cardtest3.c:
----------------- Testing Card: village ----------------
TEST 1: Current player should receive exactly 1 card.
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 2: 1 card should come from the player’s own pile
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 3: No state change should occur for other players.
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 4: No state change should occur to the kingdom card piles.
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province
TEST 5: Current player receives 1 additional action.
actions = 2, expected = 2

 >>>>> SUCCESS: Testing complete village <<<<<

File 'dominion.c'
Lines executed:35.86% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      720:    8:int compare(const void *a, const void *b)
        -:    9:{
      720:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      720:   12:  if (*(int *)a < *(int *)b)
      192:   13:    return -1;
      528:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
       24:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       24:   48:  SelectStream(1);
       24:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
       24:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       24:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      264:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
     2640:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
     2400:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       24:   76:  if (numPlayers == 2)
        -:   77:  {
       24:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       24:   90:  if (numPlayers == 2)
        -:   91:  {
       24:   92:    state->supplyCount[estate] = 8;
       24:   93:    state->supplyCount[duchy] = 8;
       24:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       24:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  105:  state->supplyCount[silver] = 40;
       24:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      504:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     3960:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     3720:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      240:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       64:  118:          if (numPlayers == 2)
        -:  119:          {
       32:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      208:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      240:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     3480:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       72:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       48:  146:    state->deckCount[i] = 0;
      192:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
      144:  149:      state->deck[i][j] = estate;
      144:  150:      state->deckCount[i]++;
        -:  151:    }
      384:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      336:  154:      state->deck[i][j] = copper;
      336:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       72:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       48:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       72:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       48:  172:    state->handCount[i] = 0;
       48:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      672:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      648:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       24:  188:  state->outpostPlayed = 0;
       24:  189:  state->phase = 0;
       24:  190:  state->numActions = 1;
       24:  191:  state->numBuys = 1;
       24:  192:  state->playedCardCount = 0;
       24:  193:  state->whoseTurn = 0;
       24:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      144:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
      120:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
       24:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       24:  205:  return 0;
        -:  206:}
        -:  207:
       48:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       48:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       48:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       48:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      576:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      480:  223:    card = floor(Random() * state->deckCount[player]);
      480:  224:    newDeck[newDeckPos] = state->deck[player][card];
      480:  225:    newDeckPos++;
     1680:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
     1200:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      480:  230:    state->deckCount[player]--;
        -:  231:  }
      528:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      480:  234:    state->deck[player][i] = newDeck[i];
      480:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       48:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
       40:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
       40:  349:  int count = 0;
        -:  350:
      340:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
      300:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
      140:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
      100:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
       40:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
       40:  369:  return count;
        -:  370:}
        -:  371:
       35:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       35:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        6:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        4:  434:  j = 0;
      104:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      100:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        6:  439:      j++;
        -:  440:    }
        -:  441:  }
        4:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
      176:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      176:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      176:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      176:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      176:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      176:  672:    state->deckCount[player]--;
      176:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      176:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       17:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       68:  744:  while (drawntreasure < 2)
        -:  745:  {
       34:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       34:  750:    drawCard(currentPlayer, state);
       34:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       34:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       34:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       34:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       17:  766:  return 0;
        -:  767:}
        -:  768:
        5:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
       15:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
       10:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        5:  779:  discardCard(handPos, currentPlayer, state, 0);
        5:  780:  return 0;
        -:  781:}
        -:  782:
        6:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        6:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        6:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        6:  793:  discardCard(handPos, currentPlayer, state, 0);
        6:  794:  return 0;
        -:  795:}
        -:  796:
        1:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        1:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        1:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        1:  807:  discardCard(handPos, currentPlayer, state, 0);
        1:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       35:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       35:  837:  int currentPlayer = whoseTurn(state);
       35:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       35:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       35:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       35:  844:  int z = 0; // this is the counter for the temp hand
       35:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       35:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       17:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        5: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        6: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        1: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
       13: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
       13: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
       13: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       13: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
       13: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
       13: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
       13: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
       13: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
       13: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
       13: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
       13: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
       25: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
       25: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
      150: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
      125: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
       96: 1540:      state->coins += 1;
        -: 1541:    }
       29: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
       29: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
       25: 1553:  state->coins += bonus;
        -: 1554:
       25: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
cardtest4.c:
----------------- Testing Card: great hall ----------------
TEST 1: Current player should receive exactly 1 card.
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 2: 1 card should come from the player’s own pile.
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 3: No state change should occur for other players.
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 4: No state change should occur to the victory card piles and kingdom card piles.
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province
TEST 5: Current player receives 2 additional actions.
actions = 3, expected = 3

 >>>>> SUCCESS: Testing complete great hall <<<<<

File 'dominion.c'
Lines executed:35.86% of 580
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      900:    8:int compare(const void *a, const void *b)
        -:    9:{
      900:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      900:   12:  if (*(int *)a < *(int *)b)
      240:   13:    return -1;
      660:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
       30:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
       30:   48:  SelectStream(1);
       30:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
       30:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
       30:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      330:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
     3300:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
     3000:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
       30:   76:  if (numPlayers == 2)
        -:   77:  {
       30:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
       30:   90:  if (numPlayers == 2)
        -:   91:  {
       30:   92:    state->supplyCount[estate] = 8;
       30:   93:    state->supplyCount[duchy] = 8;
       30:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
       30:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       30:  105:  state->supplyCount[silver] = 40;
       30:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      630:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     4950:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     4650:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      300:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       76:  118:          if (numPlayers == 2)
        -:  119:          {
       38:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
      262:  129:          state->supplyCount[i] = 10;
        -:  130:        }
      300:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     4350:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       90:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       60:  146:    state->deckCount[i] = 0;
      240:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
      180:  149:      state->deck[i][j] = estate;
      180:  150:      state->deckCount[i]++;
        -:  151:    }
      480:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      420:  154:      state->deck[i][j] = copper;
      420:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       90:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       60:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       90:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       60:  172:    state->handCount[i] = 0;
       60:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      840:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      810:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
       30:  188:  state->outpostPlayed = 0;
       30:  189:  state->phase = 0;
       30:  190:  state->numActions = 1;
       30:  191:  state->numBuys = 1;
       30:  192:  state->playedCardCount = 0;
       30:  193:  state->whoseTurn = 0;
       30:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      180:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
      150:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
       30:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       30:  205:  return 0;
        -:  206:}
        -:  207:
       60:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       60:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       60:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       60:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      720:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      600:  223:    card = floor(Random() * state->deckCount[player]);
      600:  224:    newDeck[newDeckPos] = state->deck[player][card];
      600:  225:    newDeckPos++;
     2100:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
     1500:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      600:  230:    state->deckCount[player]--;
        -:  231:  }
      660:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      600:  234:    state->deck[player][i] = newDeck[i];
      600:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       60:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        5:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        5:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
       40:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
       40:  349:  int count = 0;
        -:  350:
      340:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
      300:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
      140:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
      100:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
       40:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
       40:  369:  return count;
        -:  370:}
        -:  371:
       40:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       40:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        6:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        6:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        4:  434:  j = 0;
      104:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      100:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        6:  439:      j++;
        -:  440:    }
        -:  441:  }
        4:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
      211:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      211:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
      211:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
      211:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
      211:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      211:  672:    state->deckCount[player]--;
      211:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
      211:  676:  return 0;
        -:  677:}
        -:  678:
        5:  679:int getCost(int cardNumber)
        -:  680:{
        5:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        3:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
       17:  742:int use_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  743:{
       68:  744:  while (drawntreasure < 2)
        -:  745:  {
       34:  746:    if (state->deckCount[currentPlayer] < 1)
        -:  747:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  748:      shuffle(currentPlayer, state);
        -:  749:    }
       34:  750:    drawCard(currentPlayer, state);
       34:  751:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       34:  752:    if (cardDrawn == copper || cardDrawn == silver)                              // || cardDrawn == gold)    // bug
       34:  753:      drawntreasure++;
        -:  754:    else
        -:  755:    {
    #####:  756:      temphand[z] = cardDrawn;
    #####:  757:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  758:      z++;
        -:  759:    }
        -:  760:  }
       34:  761:  while (z - 1 >= 0)
        -:  762:  {
    #####:  763:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  764:    z = z - 1;
        -:  765:  }
       17:  766:  return 0;
        -:  767:}
        -:  768:
        5:  769:int use_smithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  770:{
        -:  771:  //+3 Cards
        -:  772:  // for(i = 0; i < 3; i++)
       15:  773:  for (i = 0; i < 2; i++) // bug
        -:  774:  {
       10:  775:    drawCard(currentPlayer, state);
        -:  776:  }
        -:  777:
        -:  778:  //discard card from hand
        5:  779:  discardCard(handPos, currentPlayer, state, 0);
        5:  780:  return 0;
        -:  781:}
        -:  782:
        6:  783:int use_village(int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
        -:  785:  //+1 Card
        6:  786:  drawCard(currentPlayer, state);
        -:  787:
        -:  788:  //+2 Actions
        -:  789:  // state->numActions = state->numActions + 2;
        6:  790:  state->numActions++; // bug
        -:  791:
        -:  792:  //discard played card from hand
        6:  793:  discardCard(handPos, currentPlayer, state, 0);
        6:  794:  return 0;
        -:  795:}
        -:  796:
        6:  797:int use_great_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  798:{
        -:  799:  //+1 Card
        6:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+1 Actions
        -:  803:  // state->numActions++;
        6:  804:  state->numActions = state->numActions + 2; // bug
        -:  805:
        -:  806:  //discard card from hand
        6:  807:  discardCard(handPos, currentPlayer, state, 0);
        6:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int use_embargo(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  812:{
        -:  813:  //+2 Coins
    #####:  814:  state->coins = state->coins + 2;
        -:  815:
        -:  816:  //see if selected pile is in play
    #####:  817:  if (state->supplyCount[choice1] == -1)
        -:  818:  {
    #####:  819:    return -1;
        -:  820:  }
        -:  821:
        -:  822:  //add embargo token to selected supply pile
    #####:  823:  state->embargoTokens[choice1]++;
        -:  824:
        -:  825:  //trash card
    #####:  826:  discardCard(handPos, currentPlayer, state, 1);
    #####:  827:  return 0;
        -:  828:}
        -:  829:
       40:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int x;
        -:  836:  int index;
       40:  837:  int currentPlayer = whoseTurn(state);
       40:  838:  int nextPlayer = currentPlayer + 1;
        -:  839:
       40:  840:  int tributeRevealedCards[2] = {-1, -1};
        -:  841:  int temphand[MAX_HAND]; // moved above the if statement
       40:  842:  int drawntreasure = 0;
        -:  843:  int cardDrawn;
       40:  844:  int z = 0; // this is the counter for the temp hand
       40:  845:  if (nextPlayer > (state->numPlayers - 1))
        -:  846:  {
    #####:  847:    nextPlayer = 0;
        -:  848:  }
        -:  849:
        -:  850:  //uses switch to select card and perform actions
       40:  851:  switch (card)
        -:  852:  {
        -:  853:
        -:  854:  case adventurer:
       17:  855:    return use_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  856:  /*
        -:  857:      while(drawntreasure<2){
        -:  858:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  859:	  shuffle(currentPlayer, state);
        -:  860:	}
        -:  861:	drawCard(currentPlayer, state);
        -:  862:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  863:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  864:	  drawntreasure++;
        -:  865:	else{
        -:  866:	  temphand[z]=cardDrawn;
        -:  867:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  868:	  z++;
        -:  869:	}
        -:  870:      }
        -:  871:      while(z-1>=0){
        -:  872:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  873:	z=z-1;
        -:  874:      }
        -:  875:      return 0;
        -:  876:	*/
        -:  877:  case council_room:
        -:  878:    //+4 Cards
        5:  879:    for (i = 0; i < 4; i++)
        -:  880:    {
        4:  881:      drawCard(currentPlayer, state);
        -:  882:    }
        -:  883:
        -:  884:    //+1 Buy
        1:  885:    state->numBuys++;
        -:  886:
        -:  887:    //Each other player draws a card
        3:  888:    for (i = 0; i < state->numPlayers; i++)
        -:  889:    {
        2:  890:      if (i != currentPlayer)
        -:  891:      {
        1:  892:        drawCard(i, state);
        -:  893:      }
        -:  894:    }
        -:  895:
        -:  896:    //put played card in played card pile
        1:  897:    discardCard(handPos, currentPlayer, state, 0);
        -:  898:
        1:  899:    return 0;
        -:  900:
        -:  901:  case feast:
        -:  902:    //gain card with cost up to 5
        -:  903:    //Backup hand
        7:  904:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  905:    {
        6:  906:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
        6:  907:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  908:    }
        -:  909:    //Backup hand
        -:  910:
        -:  911:    //Update Coins for Buy
        1:  912:    updateCoins(currentPlayer, state, 5);
        1:  913:    x = 1; //Condition to loop on
        3:  914:    while (x == 1)
        -:  915:    { //Buy one card
        1:  916:      if (supplyCount(choice1, state) <= 0)
        -:  917:      {
        -:  918:        if (DEBUG)
        -:  919:          printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:        if (DEBUG)
        -:  922:        {
        -:  923:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:        }
        -:  925:      }
        1:  926:      else if (state->coins < getCost(choice1))
        -:  927:      {
    #####:  928:        printf("That card is too expensive!\n");
        -:  929:
        -:  930:        if (DEBUG)
        -:  931:        {
        -:  932:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  933:        }
        -:  934:      }
        -:  935:      else
        -:  936:      {
        -:  937:
        -:  938:        if (DEBUG)
        -:  939:        {
        -:  940:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941:        }
        -:  942:
        1:  943:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
        1:  944:        x = 0;                                      //No more buying cards
        -:  945:
        -:  946:        if (DEBUG)
        -:  947:        {
        -:  948:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  949:        }
        -:  950:      }
        -:  951:    }
        -:  952:
        -:  953:    //Reset Hand
        7:  954:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  955:    {
        6:  956:      state->hand[currentPlayer][i] = temphand[i];
        6:  957:      temphand[i] = -1;
        -:  958:    }
        -:  959:    //Reset Hand
        -:  960:
        1:  961:    return 0;
        -:  962:
        -:  963:  case gardens:
        1:  964:    return -1;
        -:  965:
        -:  966:  case mine:
        1:  967:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  968:
        1:  969:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  970:    {
    #####:  971:      return -1;
        -:  972:    }
        -:  973:
        1:  974:    if (choice2 > treasure_map || choice2 < curse)
        -:  975:    {
    #####:  976:      return -1;
        -:  977:    }
        -:  978:
        1:  979:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  980:    {
        1:  981:      return -1;
        -:  982:    }
        -:  983:
    #####:  984:    gainCard(choice2, state, 2, currentPlayer);
        -:  985:
        -:  986:    //discard card from hand
    #####:  987:    discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:    //discard trashed card
    #####:  990:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:    {
    #####:  992:      if (state->hand[currentPlayer][i] == j)
        -:  993:      {
    #####:  994:        discardCard(i, currentPlayer, state, 0);
    #####:  995:        break;
        -:  996:      }
        -:  997:    }
        -:  998:
    #####:  999:    return 0;
        -: 1000:
        -: 1001:  case remodel:
        1: 1002:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1003:
        1: 1004:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1005:    {
        1: 1006:      return -1;
        -: 1007:    }
        -: 1008:
    #####: 1009:    gainCard(choice2, state, 0, currentPlayer);
        -: 1010:
        -: 1011:    //discard card from hand
    #####: 1012:    discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
        -: 1014:    //discard trashed card
    #####: 1015:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:    {
    #####: 1017:      if (state->hand[currentPlayer][i] == j)
        -: 1018:      {
    #####: 1019:        discardCard(i, currentPlayer, state, 0);
    #####: 1020:        break;
        -: 1021:      }
        -: 1022:    }
        -: 1023:
    #####: 1024:    return 0;
        -: 1025:
        -: 1026:  case smithy:
        5: 1027:    return use_smithy(i, currentPlayer, state, handPos);
        -: 1028:    /*
        -: 1029:      //+3 Cards
        -: 1030:      for (i = 0; i < 3; i++)
        -: 1031:	{
        -: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
        -: 1036:      discardCard(handPos, currentPlayer, state, 0);
        -: 1037:      return 0;
        -: 1038:	*/
        -: 1039:
        -: 1040:  case village:
        6: 1041:    return use_village(currentPlayer, state, handPos);
        -: 1042:  /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:	*/
        -: 1053:  case baron:
        1: 1054:    state->numBuys++; //Increase buys by 1!
        1: 1055:    if (choice1 > 0)
        -: 1056:    {                             //Boolean true or going to discard an estate
    #####: 1057:      int p = 0;                  //Iterator for hand!
    #####: 1058:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1059:      while (card_not_discarded)
        -: 1060:      {
    #####: 1061:        if (state->hand[currentPlayer][p] == estate)
        -: 1062:        {                    //Found an estate card!
    #####: 1063:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1064:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1065:          state->discardCount[currentPlayer]++;
    #####: 1066:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1067:          {
    #####: 1068:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1069:          }
    #####: 1070:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1071:          state->handCount[currentPlayer]--;
    #####: 1072:          card_not_discarded = 0; //Exit the loop
        -: 1073:        }
    #####: 1074:        else if (p > state->handCount[currentPlayer])
        -: 1075:        {
        -: 1076:          if (DEBUG)
        -: 1077:          {
        -: 1078:            printf("No estate cards in your hand, invalid choice\n");
        -: 1079:            printf("Must gain an estate if there are any\n");
        -: 1080:          }
    #####: 1081:          if (supplyCount(estate, state) > 0)
        -: 1082:          {
    #####: 1083:            gainCard(estate, state, 0, currentPlayer);
    #####: 1084:            state->supplyCount[estate]--; //Decrement estates
    #####: 1085:            if (supplyCount(estate, state) == 0)
        -: 1086:            {
    #####: 1087:              isGameOver(state);
        -: 1088:            }
        -: 1089:          }
    #####: 1090:          card_not_discarded = 0; //Exit the loop
        -: 1091:        }
        -: 1092:
        -: 1093:        else
        -: 1094:        {
    #####: 1095:          p++; //Next card
        -: 1096:        }
        -: 1097:      }
        -: 1098:    }
        -: 1099:
        -: 1100:    else
        -: 1101:    {
        1: 1102:      if (supplyCount(estate, state) > 0)
        -: 1103:      {
        1: 1104:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
        1: 1105:        state->supplyCount[estate]--;              //Decrement Estates
        1: 1106:        if (supplyCount(estate, state) == 0)
        -: 1107:        {
    #####: 1108:          isGameOver(state);
        -: 1109:        }
        -: 1110:      }
        -: 1111:    }
        -: 1112:
        1: 1113:    return 0;
        -: 1114:
        -: 1115:  case great_hall:
        6: 1116:    return use_great_hall(currentPlayer, state, handPos);
        -: 1117:  /*
        -: 1118:      //+1 Card
        -: 1119:      drawCard(currentPlayer, state);
        -: 1120:			
        -: 1121:      //+1 Actions
        -: 1122:      state->numActions++;
        -: 1123:			
        -: 1124:      //discard card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:      return 0;
        -: 1127:	*/
        -: 1128:  case minion:
        -: 1129:    //+1 action
    #####: 1130:    state->numActions++;
        -: 1131:
        -: 1132:    //discard card from hand
    #####: 1133:    discardCard(handPos, currentPlayer, state, 0);
        -: 1134:
    #####: 1135:    if (choice1) //+2 coins
        -: 1136:    {
    #####: 1137:      state->coins = state->coins + 2;
        -: 1138:    }
        -: 1139:
    #####: 1140:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1141:    {
        -: 1142:      //discard hand
    #####: 1143:      while (numHandCards(state) > 0)
        -: 1144:      {
    #####: 1145:        discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      }
        -: 1147:
        -: 1148:      //draw 4
    #####: 1149:      for (i = 0; i < 4; i++)
        -: 1150:      {
    #####: 1151:        drawCard(currentPlayer, state);
        -: 1152:      }
        -: 1153:
        -: 1154:      //other players discard hand and redraw if hand size > 4
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:      {
    #####: 1157:        if (i != currentPlayer)
        -: 1158:        {
    #####: 1159:          if (state->handCount[i] > 4)
        -: 1160:          {
        -: 1161:            //discard hand
    #####: 1162:            while (state->handCount[i] > 0)
        -: 1163:            {
    #####: 1164:              discardCard(handPos, i, state, 0);
        -: 1165:            }
        -: 1166:
        -: 1167:            //draw 4
    #####: 1168:            for (j = 0; j < 4; j++)
        -: 1169:            {
    #####: 1170:              drawCard(i, state);
        -: 1171:            }
        -: 1172:          }
        -: 1173:        }
        -: 1174:      }
        -: 1175:    }
    #####: 1176:    return 0;
        -: 1177:
        -: 1178:  case steward:
    #####: 1179:    if (choice1 == 1)
        -: 1180:    {
        -: 1181:      //+2 cards
    #####: 1182:      drawCard(currentPlayer, state);
    #####: 1183:      drawCard(currentPlayer, state);
        -: 1184:    }
    #####: 1185:    else if (choice1 == 2)
        -: 1186:    {
        -: 1187:      //+2 coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:    }
        -: 1190:    else
        -: 1191:    {
        -: 1192:      //trash 2 cards in hand
    #####: 1193:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1194:      discardCard(choice3, currentPlayer, state, 1);
        -: 1195:    }
        -: 1196:
        -: 1197:    //discard card from hand
    #####: 1198:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:    return 0;
        -: 1200:
        -: 1201:  case tribute:
    #####: 1202:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1203:    {
    #####: 1204:      if (state->deckCount[nextPlayer] > 0)
        -: 1205:      {
    #####: 1206:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1207:        state->deckCount[nextPlayer]--;
        -: 1208:      }
    #####: 1209:      else if (state->discardCount[nextPlayer] > 0)
        -: 1210:      {
    #####: 1211:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1212:        state->discardCount[nextPlayer]--;
        -: 1213:      }
        -: 1214:      else
        -: 1215:      {
        -: 1216:        //No Card to Reveal
        -: 1217:        if (DEBUG)
        -: 1218:        {
        -: 1219:          printf("No cards to reveal\n");
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    else
        -: 1225:    {
    #####: 1226:      if (state->deckCount[nextPlayer] == 0)
        -: 1227:      {
    #####: 1228:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1229:        {
    #####: 1230:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1231:          state->deckCount[nextPlayer]++;
    #####: 1232:          state->discard[nextPlayer][i] = -1;
    #####: 1233:          state->discardCount[nextPlayer]--;
        -: 1234:        }
        -: 1235:
    #####: 1236:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1237:      }
    #####: 1238:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1239:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1240:      state->deckCount[nextPlayer]--;
    #####: 1241:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1242:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1243:      state->deckCount[nextPlayer]--;
        -: 1244:    }
        -: 1245:
    #####: 1246:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1247:    { //If we have a duplicate card, just drop one
    #####: 1248:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1249:      state->playedCardCount++;
    #####: 1250:      tributeRevealedCards[1] = -1;
        -: 1251:    }
        -: 1252:
    #####: 1253:    for (i = 0; i <= 2; i++)
        -: 1254:    {
    #####: 1255:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1256:      { //Treasure cards
    #####: 1257:        state->coins += 2;
        -: 1258:      }
        -: 1259:
    #####: 1260:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1261:      { //Victory Card Found
    #####: 1262:        drawCard(currentPlayer, state);
    #####: 1263:        drawCard(currentPlayer, state);
        -: 1264:      }
        -: 1265:      else
        -: 1266:      { //Action Card
    #####: 1267:        state->numActions = state->numActions + 2;
        -: 1268:      }
        -: 1269:    }
        -: 1270:
    #####: 1271:    return 0;
        -: 1272:
        -: 1273:  case ambassador:
    #####: 1274:    j = 0; //used to check if player has enough cards to discard
        -: 1275:
    #####: 1276:    if (choice2 > 2 || choice2 < 0)
        -: 1277:    {
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:
    #####: 1281:    if (choice1 == handPos)
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
    #####: 1286:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1287:    {
    #####: 1288:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1289:      {
    #####: 1290:        j++;
        -: 1291:      }
        -: 1292:    }
    #####: 1293:    if (j < choice2)
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    if (DEBUG)
        -: 1299:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1300:
        -: 1301:    //increase supply count for choosen card by amount being discarded
    #####: 1302:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1303:
        -: 1304:    //each other player gains a copy of revealed card
    #####: 1305:    for (i = 0; i < state->numPlayers; i++)
        -: 1306:    {
    #####: 1307:      if (i != currentPlayer)
        -: 1308:      {
    #####: 1309:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1310:      }
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard played card from hand
    #####: 1314:    discardCard(handPos, currentPlayer, state, 0);
        -: 1315:
        -: 1316:    //trash copies of cards returned to supply
    #####: 1317:    for (j = 0; j < choice2; j++)
        -: 1318:    {
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:      {
    #####: 1321:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1322:        {
    #####: 1323:          discardCard(i, currentPlayer, state, 1);
    #####: 1324:          break;
        -: 1325:        }
        -: 1326:      }
        -: 1327:    }
        -: 1328:
    #####: 1329:    return 0;
        -: 1330:
        -: 1331:  case cutpurse:
        -: 1332:
    #####: 1333:    updateCoins(currentPlayer, state, 2);
    #####: 1334:    for (i = 0; i < state->numPlayers; i++)
        -: 1335:    {
    #####: 1336:      if (i != currentPlayer)
        -: 1337:      {
    #####: 1338:        for (j = 0; j < state->handCount[i]; j++)
        -: 1339:        {
    #####: 1340:          if (state->hand[i][j] == copper)
        -: 1341:          {
    #####: 1342:            discardCard(j, i, state, 0);
    #####: 1343:            break;
        -: 1344:          }
    #####: 1345:          if (j == state->handCount[i])
        -: 1346:          {
    #####: 1347:            for (k = 0; k < state->handCount[i]; k++)
        -: 1348:            {
        -: 1349:              if (DEBUG)
        -: 1350:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1351:            }
    #####: 1352:            break;
        -: 1353:          }
        -: 1354:        }
        -: 1355:      }
        -: 1356:    }
        -: 1357:
        -: 1358:    //discard played card from hand
    #####: 1359:    discardCard(handPos, currentPlayer, state, 0);
        -: 1360:
    #####: 1361:    return 0;
        -: 1362:
        -: 1363:  case embargo:
    #####: 1364:    return use_embargo(state, handPos, currentPlayer, choice1);
        -: 1365:  /*
        -: 1366:      //+2 Coins
        -: 1367:      state->coins = state->coins + 2;
        -: 1368:			
        -: 1369:      //see if selected pile is in play
        -: 1370:      if ( state->supplyCount[choice1] == -1 )
        -: 1371:	{
        -: 1372:	  return -1;
        -: 1373:	}
        -: 1374:			
        -: 1375:      //add embargo token to selected supply pile
        -: 1376:      state->embargoTokens[choice1]++;
        -: 1377:			
        -: 1378:      //trash card
        -: 1379:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1380:      return 0;
        -: 1381:	*/
        -: 1382:  case outpost:
        -: 1383:    //set outpost flag
    #####: 1384:    state->outpostPlayed++;
        -: 1385:
        -: 1386:    //discard card
    #####: 1387:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1388:    return 0;
        -: 1389:
        -: 1390:  case salvager:
        -: 1391:    //+1 buy
    #####: 1392:    state->numBuys++;
        -: 1393:
    #####: 1394:    if (choice1)
        -: 1395:    {
        -: 1396:      //gain coins equal to trashed card
    #####: 1397:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1398:      //trash card
    #####: 1399:      discardCard(choice1, currentPlayer, state, 1);
        -: 1400:    }
        -: 1401:
        -: 1402:    //discard card
    #####: 1403:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1404:    return 0;
        -: 1405:
        -: 1406:  case sea_hag:
    #####: 1407:    for (i = 0; i < state->numPlayers; i++)
        -: 1408:    {
    #####: 1409:      if (i != currentPlayer)
        -: 1410:      {
    #####: 1411:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1412:        state->deckCount[i]--;
    #####: 1413:        state->discardCount[i]++;
    #####: 1414:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1415:      }
        -: 1416:    }
    #####: 1417:    return 0;
        -: 1418:
        -: 1419:  case treasure_map:
        -: 1420:    //search hand for another treasure_map
    #####: 1421:    index = -1;
    #####: 1422:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1423:    {
    #####: 1424:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1425:      {
    #####: 1426:        index = i;
    #####: 1427:        break;
        -: 1428:      }
        -: 1429:    }
    #####: 1430:    if (index > -1)
        -: 1431:    {
        -: 1432:      //trash both treasure cards
    #####: 1433:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1434:      discardCard(index, currentPlayer, state, 1);
        -: 1435:
        -: 1436:      //gain 4 Gold cards
    #####: 1437:      for (i = 0; i < 4; i++)
        -: 1438:      {
    #####: 1439:        gainCard(gold, state, 1, currentPlayer);
        -: 1440:      }
        -: 1441:
        -: 1442:      //return success
    #####: 1443:      return 1;
        -: 1444:    }
        -: 1445:
        -: 1446:    //no second treasure_map found in hand
    #####: 1447:    return -1;
        -: 1448:  }
        -: 1449:
    #####: 1450:  return -1;
        -: 1451:}
        -: 1452:
       18: 1453:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1454:{
        -: 1455:
        -: 1456:  //if card is not trashed, added to Played pile
       18: 1457:  if (trashFlag < 1)
        -: 1458:  {
        -: 1459:    //add card to played pile
       18: 1460:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       18: 1461:    state->playedCardCount++;
        -: 1462:  }
        -: 1463:
        -: 1464:  //set played card to -1
       18: 1465:  state->hand[currentPlayer][handPos] = -1;
        -: 1466:
        -: 1467:  //remove card from player's hand
       18: 1468:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1469:  {
        -: 1470:    //reduce number of cards in hand
    #####: 1471:    state->handCount[currentPlayer]--;
        -: 1472:  }
       18: 1473:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1474:  {
        -: 1475:    //reduce number of cards in hand
    #####: 1476:    state->handCount[currentPlayer]--;
        -: 1477:  }
        -: 1478:  else
        -: 1479:  {
        -: 1480:    //replace discarded card with last card in hand
       18: 1481:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1482:    //set last card to -1
       18: 1483:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1484:    //reduce number of cards in hand
       18: 1485:    state->handCount[currentPlayer]--;
        -: 1486:  }
        -: 1487:
       18: 1488:  return 0;
        -: 1489:}
        -: 1490:
        2: 1491:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1492:{
        -: 1493:  //Note: supplyPos is enum of choosen card
        -: 1494:
        -: 1495:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1496:  if (supplyCount(supplyPos, state) < 1)
        -: 1497:  {
    #####: 1498:    return -1;
        -: 1499:  }
        -: 1500:
        -: 1501:  //added card for [whoseTurn] current player:
        -: 1502:  // toFlag = 0 : add to discard
        -: 1503:  // toFlag = 1 : add to deck
        -: 1504:  // toFlag = 2 : add to hand
        -: 1505:
        2: 1506:  if (toFlag == 1)
        -: 1507:  {
    #####: 1508:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1509:    state->deckCount[player]++;
        -: 1510:  }
        2: 1511:  else if (toFlag == 2)
        -: 1512:  {
    #####: 1513:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1514:    state->handCount[player]++;
        -: 1515:  }
        -: 1516:  else
        -: 1517:  {
        2: 1518:    state->discard[player][state->discardCount[player]] = supplyPos;
        2: 1519:    state->discardCount[player]++;
        -: 1520:  }
        -: 1521:
        -: 1522:  //decrease number in supply pile
        2: 1523:  state->supplyCount[supplyPos]--;
        -: 1524:
        2: 1525:  return 0;
        -: 1526:}
        -: 1527:
       31: 1528:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1529:{
        -: 1530:  int i;
        -: 1531:
        -: 1532:  //reset coin count
       31: 1533:  state->coins = 0;
        -: 1534:
        -: 1535:  //add coins for each Treasure card in player's hand
      186: 1536:  for (i = 0; i < state->handCount[player]; i++)
        -: 1537:  {
      155: 1538:    if (state->hand[player][i] == copper)
        -: 1539:    {
      120: 1540:      state->coins += 1;
        -: 1541:    }
       35: 1542:    else if (state->hand[player][i] == silver)
        -: 1543:    {
    #####: 1544:      state->coins += 2;
        -: 1545:    }
       35: 1546:    else if (state->hand[player][i] == gold)
        -: 1547:    {
    #####: 1548:      state->coins += 3;
        -: 1549:    }
        -: 1550:  }
        -: 1551:
        -: 1552:  //add bonus
       31: 1553:  state->coins += bonus;
        -: 1554:
       31: 1555:  return 0;
        -: 1556:}
        -: 1557:
        -: 1558://end of dominion.c
