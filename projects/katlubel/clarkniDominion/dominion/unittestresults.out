unittest1.c:
UNIT TEST supplyCount():
Test 0 - after 0 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 1 - after 1 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 2 - after 2 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 3 - after 3 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 4 - after 4 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 5 - after 5 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 6 - after 6 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 7 - after 7 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 8 - after 8 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
Test 9 - after 9 card
Test - there should be 8 of each victory card for a two player game
Test - number of kingdom cards
All tests passed
File 'dominion.c'
Lines executed:22.86% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       30:   13:  if (*(int*)a < *(int*)b)
        8:   14:    return -1;
       22:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      165:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       10:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
        4:  117:		  if (numPlayers == 2){ 
        2:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
        8:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        -:  147:	}
       16:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
        5:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        -:  201:}
        -:  202:
      202:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      202:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      202:  211:  if (state->deckCount[player] < 1)
      200:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:  while (state->deckCount[player] > 0) {
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
       70:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       50:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       22:  225:  for (i = 0; i < newDeckPos; i++) {
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        2:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       10:  348:int whoseTurn(struct gameState *state) {
       10:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      155:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      155:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      100:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      100:  540:    state->deckCount[player] = state->discardCount[player];
      100:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      100:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      100:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      100:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      100:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      100:  561:    if (deckCounter == 0)
      100:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       55:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       55:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       55:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       55:  578:    state->deckCount[player]--;
       55:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       55:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
    #####:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
    #####:  660:	for (int i = 0; i <=3; i++) {
    #####:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
    #####:  665:	discardCard(handPos, currentPlayer, state, 0);
    #####:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       10:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       10:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       10:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      170:  680:	while (drawntreasure < 2) {
      150:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      100:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      150:  684:			drawCard(currentPlayer, state);
      150:  685:			cardDrawn =
      150:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      150:  687:							- 1]; //top card of hand is most recently drawn card.
      150:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       20:  689:				drawntreasure++;
        -:  690:			else {
      130:  691:				temphand[z] = cardDrawn;
      130:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      130:  693:				z++;
        -:  694:			}
        -:  695:		}
      150:  696:		while (z - 1 >= 0) {
      260:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      130:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      130:  699:			z = z - 1;
        -:  700:		}
       10:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
    #####:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
    #####:  762:	for (i = 0; i <= 4; i++) {
    #####:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
    #####:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
    #####:  770:	for (i = 0; i < state->numPlayers; i++) {
    #####:  771:		if (i != currentPlayer) {
    #####:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
    #####:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
    #####:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       10:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       10:  791:  int currentPlayer = whoseTurn(state);
       10:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       10:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       10:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       10:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       10:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
    #####:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
    #####:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
    #####:  823:      updateCoins(currentPlayer, state, 5);
    #####:  824:      x = 1;//Condition to loop on
    #####:  825:      while( x == 1) {//Buy one card
    #####:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
    #####:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
    #####:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
    #####:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  859:	state->hand[currentPlayer][i] = temphand[i];
    #####:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
    #####:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
    #####:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
    #####:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
    #####:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
    #####:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
    #####:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
    #####:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
    #####:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
    #####:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
    #####:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
    #####:  945:      state->numBuys++;//Increase buys by 1!
    #####:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
    #####:  983:	if (supplyCount(estate, state) > 0){
    #####:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  985:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
    #####:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
    #####: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
    #####: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
    #####: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
    #####: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
    #####: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
    #####: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
    #####: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
    #####: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
    #####: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
    #####: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
    #####: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
    #####: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
    #####: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
    #####: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
    #####: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
    #####: 1355:  return 0;
        -: 1356:}
        -: 1357:
        1: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
        1: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
        6: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
        5: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
        4: 1370:	  state->coins += 1;
        -: 1371:	}
        1: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
        1: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
        1: 1383:  state->coins += bonus;
        -: 1384:
        1: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
unittest2.c:
UNIT TEST whoseTurn():
Test 1 - whose turn at beginning of game
Test 2 - whose turn after kingdom card 0, called using cardEffect()
Test 3 - whose turn after kingdom card 1, called using cardEffect()
Test 4 - whose turn after kingdom card 2, called using cardEffect()
Test 5 - whose turn after kingdom card 3, called using cardEffect()
Test 6 - whose turn after kingdom card 4, called using cardEffect()
Test 7 - whose turn after kingdom card 5, called using cardEffect()
Test 8 - whose turn after kingdom card 6, called using cardEffect()
Test 9 - whose turn after kingdom card 7, called using cardEffect()
Test 10 - whose turn after kingdom card 8, called using cardEffect()
Test 11 - whose turn after kingdom card 9, called using cardEffect()
All tests passed
File 'dominion.c'
Lines executed:36.96% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
       60:   10:int compare(const void* a, const void* b) {
       60:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       60:   13:  if (*(int*)a < *(int*)b)
       16:   14:    return -1;
       44:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        2:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        2:   46:  SelectStream(1);
        2:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        2:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      200:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        2:   75:  if (numPlayers == 2)
        -:   76:    {
        2:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        2:   89:  if (numPlayers == 2)
        -:   90:    {
        2:   91:      state->supplyCount[estate] = 8;
        2:   92:      state->supplyCount[duchy] = 8;
        2:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        2:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  104:  state->supplyCount[silver] = 40;
        2:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      310:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
        8:  117:		  if (numPlayers == 2){ 
        4:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       16:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       20:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      290:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        4:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       12:  145:	  state->deck[i][j] = estate;
       12:  146:	  state->deckCount[i]++;
        -:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       28:  150:	  state->deck[i][j] = copper;
       28:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        4:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        4:  168:      state->handCount[i] = 0;
        4:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       54:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        2:  184:  state->outpostPlayed = 0;
        2:  185:  state->phase = 0;
        2:  186:  state->numActions = 1;
        2:  187:  state->numBuys = 1;
        2:  188:  state->playedCardCount = 0;
        2:  189:  state->whoseTurn = 0;
        2:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
       10:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        2:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        2:  200:  return 0;
        -:  201:}
        -:  202:
      224:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      224:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      224:  211:  if (state->deckCount[player] < 1)
      220:  212:    return -1;
        4:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       48:  216:  while (state->deckCount[player] > 0) {
       40:  217:    card = floor(Random() * state->deckCount[player]);
       40:  218:    newDeck[newDeckPos] = state->deck[player][card];
       40:  219:    newDeckPos++;
      140:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      100:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       40:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
       40:  226:    state->deck[player][i] = newDeck[i];
       40:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        4:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       20:  348:int whoseTurn(struct gameState *state) {
       20:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      187:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      187:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      110:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      110:  540:    state->deckCount[player] = state->discardCount[player];
      110:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      110:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      110:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      110:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      110:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      110:  561:    if (deckCounter == 0)
      110:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       77:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       77:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       77:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       77:  578:    state->deckCount[player]--;
       77:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       77:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        1:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
        5:  660:	for (int i = 0; i <=3; i++) {
        4:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        1:  665:	discardCard(handPos, currentPlayer, state, 0);
        1:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       11:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       11:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       11:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      187:  680:	while (drawntreasure < 2) {
      165:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      110:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      165:  684:			drawCard(currentPlayer, state);
      165:  685:			cardDrawn =
      165:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      165:  687:							- 1]; //top card of hand is most recently drawn card.
      165:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       22:  689:				drawntreasure++;
        -:  690:			else {
      143:  691:				temphand[z] = cardDrawn;
      143:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      143:  693:				z++;
        -:  694:			}
        -:  695:		}
      165:  696:		while (z - 1 >= 0) {
      286:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      143:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      143:  699:			z = z - 1;
        -:  700:		}
       11:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       20:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       20:  791:  int currentPlayer = whoseTurn(state);
       20:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       20:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       20:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       20:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        1:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        1:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        1:  941:      discardCard(handPos, currentPlayer, state, 0);
        1:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        1:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        1: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        1: 1003:      discardCard(handPos, currentPlayer, state, 0);
        1: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
        4: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        4: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
        4: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        4: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        4: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        4: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        4: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        4: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        4: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        4: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
        3: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
        3: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
       18: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
       15: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
        8: 1370:	  state->coins += 1;
        -: 1371:	}
        7: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
        7: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
        3: 1383:  state->coins += bonus;
        -: 1384:
        3: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
unittest3.c:
UNIT TEST isGameOver():
Test 1 - initial game state
Test 2 - stack of province cards in empty
8Test 3 - three supply piles are empty
All tests passed
File 'dominion.c'
Lines executed:38.75% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
      180:   10:int compare(const void* a, const void* b) {
      180:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      180:   13:  if (*(int*)a < *(int*)b)
       48:   14:    return -1;
      132:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        6:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        6:   46:  SelectStream(1);
        6:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        6:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        6:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       66:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      660:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      600:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        6:   75:  if (numPlayers == 2)
        -:   76:    {
        6:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        6:   89:  if (numPlayers == 2)
        -:   90:    {
        6:   91:      state->supplyCount[estate] = 8;
        6:   92:      state->supplyCount[duchy] = 8;
        6:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        6:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  104:  state->supplyCount[silver] = 40;
        6:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      126:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      990:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      930:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       60:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       24:  117:		  if (numPlayers == 2){ 
       12:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       48:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       60:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      870:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       18:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       12:  142:      state->deckCount[i] = 0;
       48:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       36:  145:	  state->deck[i][j] = estate;
       36:  146:	  state->deckCount[i]++;
        -:  147:	}
       96:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       84:  150:	  state->deck[i][j] = copper;
       84:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       18:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       12:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       18:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       12:  168:      state->handCount[i] = 0;
       12:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      168:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      162:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        6:  184:  state->outpostPlayed = 0;
        6:  185:  state->phase = 0;
        6:  186:  state->numActions = 1;
        6:  187:  state->numBuys = 1;
        6:  188:  state->playedCardCount = 0;
        6:  189:  state->whoseTurn = 0;
        6:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       36:  194:  for (it = 0; it < 5; it++){
       30:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        6:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        6:  200:  return 0;
        -:  201:}
        -:  202:
      232:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      232:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      232:  211:  if (state->deckCount[player] < 1)
      220:  212:    return -1;
       12:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      144:  216:  while (state->deckCount[player] > 0) {
      120:  217:    card = floor(Random() * state->deckCount[player]);
      120:  218:    newDeck[newDeckPos] = state->deck[player][card];
      120:  219:    newDeckPos++;
      420:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      300:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      120:  223:    state->deckCount[player]--;
        -:  224:  }
      132:  225:  for (i = 0; i < newDeckPos; i++) {
      120:  226:    state->deck[player][i] = newDeck[i];
      120:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       12:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       20:  348:int whoseTurn(struct gameState *state) {
       20:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        6:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        6:  408:	  j++;
        -:  409:	}
        -:  410:    }
        4:  411:  if ( j >= 3)
        -:  412:    {
        2:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      207:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      207:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      110:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      110:  540:    state->deckCount[player] = state->discardCount[player];
      110:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      110:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      110:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      110:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      110:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      110:  561:    if (deckCounter == 0)
      110:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       97:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       97:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       97:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       97:  578:    state->deckCount[player]--;
       97:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       97:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        1:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
        5:  660:	for (int i = 0; i <=3; i++) {
        4:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        1:  665:	discardCard(handPos, currentPlayer, state, 0);
        1:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       11:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       11:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       11:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      187:  680:	while (drawntreasure < 2) {
      165:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      110:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      165:  684:			drawCard(currentPlayer, state);
      165:  685:			cardDrawn =
      165:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      165:  687:							- 1]; //top card of hand is most recently drawn card.
      165:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       22:  689:				drawntreasure++;
        -:  690:			else {
      143:  691:				temphand[z] = cardDrawn;
      143:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      143:  693:				z++;
        -:  694:			}
        -:  695:		}
      165:  696:		while (z - 1 >= 0) {
      286:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      143:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      143:  699:			z = z - 1;
        -:  700:		}
       11:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       20:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       20:  791:  int currentPlayer = whoseTurn(state);
       20:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       20:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       20:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       20:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        1:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        1:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        1:  941:      discardCard(handPos, currentPlayer, state, 0);
        1:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        1:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        1: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        1: 1003:      discardCard(handPos, currentPlayer, state, 0);
        1: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
        4: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        4: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
        4: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        4: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        4: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        4: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        4: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        4: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        4: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        4: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
        7: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
        7: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
       42: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
       35: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
       24: 1370:	  state->coins += 1;
        -: 1371:	}
       11: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
       11: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
        7: 1383:  state->coins += bonus;
        -: 1384:
        7: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
unittest4.c:
UNIT TEST fullDeckCount():
Test 1 - player 1 and each kingdom card
Test 2 - player 2 and each kingdom card
All tests passed!
File 'dominion.c'
Lines executed:40.18% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
      240:   10:int compare(const void* a, const void* b) {
      240:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      240:   13:  if (*(int*)a < *(int*)b)
       64:   14:    return -1;
      176:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        8:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        8:   46:  SelectStream(1);
        8:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        8:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        8:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       88:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      880:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      800:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        8:   75:  if (numPlayers == 2)
        -:   76:    {
        8:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        8:   89:  if (numPlayers == 2)
        -:   90:    {
        8:   91:      state->supplyCount[estate] = 8;
        8:   92:      state->supplyCount[duchy] = 8;
        8:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        8:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  104:  state->supplyCount[silver] = 40;
        8:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      168:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     1320:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     1240:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       80:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       32:  117:		  if (numPlayers == 2){ 
       16:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       64:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       80:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1160:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       24:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       16:  142:      state->deckCount[i] = 0;
       64:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       48:  145:	  state->deck[i][j] = estate;
       48:  146:	  state->deckCount[i]++;
        -:  147:	}
      128:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      112:  150:	  state->deck[i][j] = copper;
      112:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       24:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       16:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       24:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       16:  168:      state->handCount[i] = 0;
       16:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      224:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      216:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        8:  184:  state->outpostPlayed = 0;
        8:  185:  state->phase = 0;
        8:  186:  state->numActions = 1;
        8:  187:  state->numBuys = 1;
        8:  188:  state->playedCardCount = 0;
        8:  189:  state->whoseTurn = 0;
        8:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       48:  194:  for (it = 0; it < 5; it++){
       40:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        8:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        8:  200:  return 0;
        -:  201:}
        -:  202:
      236:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      236:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      236:  211:  if (state->deckCount[player] < 1)
      220:  212:    return -1;
       16:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      192:  216:  while (state->deckCount[player] > 0) {
      160:  217:    card = floor(Random() * state->deckCount[player]);
      160:  218:    newDeck[newDeckPos] = state->deck[player][card];
      160:  219:    newDeckPos++;
      560:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      400:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      160:  223:    state->deckCount[player]--;
        -:  224:  }
      176:  225:  for (i = 0; i < newDeckPos; i++) {
      160:  226:    state->deck[player][i] = newDeck[i];
      160:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       16:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
       40:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       40:  328:  int count = 0;
        -:  329:
      340:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
      300:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
      140:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
      100:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
       40:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
       40:  345:  return count;
        -:  346:}
        -:  347:
       20:  348:int whoseTurn(struct gameState *state) {
       20:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        6:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        6:  408:	  j++;
        -:  409:	}
        -:  410:    }
        4:  411:  if ( j >= 3)
        -:  412:    {
        2:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      217:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      217:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      110:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      110:  540:    state->deckCount[player] = state->discardCount[player];
      110:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      110:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      110:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      110:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      110:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      110:  561:    if (deckCounter == 0)
      110:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
      107:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      107:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      107:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      107:  578:    state->deckCount[player]--;
      107:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      107:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        1:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
        5:  660:	for (int i = 0; i <=3; i++) {
        4:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        1:  665:	discardCard(handPos, currentPlayer, state, 0);
        1:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       11:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       11:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       11:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      187:  680:	while (drawntreasure < 2) {
      165:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      110:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      165:  684:			drawCard(currentPlayer, state);
      165:  685:			cardDrawn =
      165:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      165:  687:							- 1]; //top card of hand is most recently drawn card.
      165:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       22:  689:				drawntreasure++;
        -:  690:			else {
      143:  691:				temphand[z] = cardDrawn;
      143:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      143:  693:				z++;
        -:  694:			}
        -:  695:		}
      165:  696:		while (z - 1 >= 0) {
      286:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      143:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      143:  699:			z = z - 1;
        -:  700:		}
       11:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       20:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       20:  791:  int currentPlayer = whoseTurn(state);
       20:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       20:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       20:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       20:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        1:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        1:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        1:  941:      discardCard(handPos, currentPlayer, state, 0);
        1:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        1:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        1: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        1: 1003:      discardCard(handPos, currentPlayer, state, 0);
        1: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
        4: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        4: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
        4: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        4: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        4: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        4: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        4: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        4: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        4: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        4: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
        9: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
        9: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
       54: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
       45: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
       32: 1370:	  state->coins += 1;
        -: 1371:	}
       13: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
       13: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
        9: 1383:  state->coins += bonus;
        -: 1384:
        9: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
cardtest1.c:
----------------- Testing Card: smithy ----------------
TEST 1: Current player should receive exactly 3 cards
hand count = 8, expected = 7
deck count = 1, expected = 2
hand count failed
deck count failed
TEST 2: 3 cards should come from the player’s own pile
hand count = 8, expected = 7
deck count = 1, expected = 2
hand count failed
deck count failed
TEST 3: No state change should occur for other players
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 4: No state change should occur to the victory card piles and kingdom card piles
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province

 >>>>> SUCCESS: Testing complete smithy <<<<<

File 'dominion.c'
Lines executed:40.18% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
      360:   10:int compare(const void* a, const void* b) {
      360:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      360:   13:  if (*(int*)a < *(int*)b)
       96:   14:    return -1;
      264:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       12:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       12:   46:  SelectStream(1);
       12:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       12:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       12:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      132:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     1320:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     1200:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       12:   75:  if (numPlayers == 2)
        -:   76:    {
       12:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       12:   89:  if (numPlayers == 2)
        -:   90:    {
       12:   91:      state->supplyCount[estate] = 8;
       12:   92:      state->supplyCount[duchy] = 8;
       12:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       12:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  104:  state->supplyCount[silver] = 40;
       12:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      252:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     1980:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     1860:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      120:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       40:  117:		  if (numPlayers == 2){ 
       20:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      100:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      120:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1740:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       36:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       24:  142:      state->deckCount[i] = 0;
       96:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       72:  145:	  state->deck[i][j] = estate;
       72:  146:	  state->deckCount[i]++;
        -:  147:	}
      192:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      168:  150:	  state->deck[i][j] = copper;
      168:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       36:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       24:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       36:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       24:  168:      state->handCount[i] = 0;
       24:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      336:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      324:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       12:  184:  state->outpostPlayed = 0;
       12:  185:  state->phase = 0;
       12:  186:  state->numActions = 1;
       12:  187:  state->numBuys = 1;
       12:  188:  state->playedCardCount = 0;
       12:  189:  state->whoseTurn = 0;
       12:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       72:  194:  for (it = 0; it < 5; it++){
       60:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       12:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       12:  200:  return 0;
        -:  201:}
        -:  202:
      244:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      244:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      244:  211:  if (state->deckCount[player] < 1)
      220:  212:    return -1;
       24:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      288:  216:  while (state->deckCount[player] > 0) {
      240:  217:    card = floor(Random() * state->deckCount[player]);
      240:  218:    newDeck[newDeckPos] = state->deck[player][card];
      240:  219:    newDeckPos++;
      840:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      600:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      240:  223:    state->deckCount[player]--;
        -:  224:  }
      264:  225:  for (i = 0; i < newDeckPos; i++) {
      240:  226:    state->deck[player][i] = newDeck[i];
      240:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       24:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
       40:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       40:  328:  int count = 0;
        -:  329:
      340:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
      300:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
      140:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
      100:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
       40:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
       40:  345:  return count;
        -:  346:}
        -:  347:
       20:  348:int whoseTurn(struct gameState *state) {
       20:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        6:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        6:  408:	  j++;
        -:  409:	}
        -:  410:    }
        4:  411:  if ( j >= 3)
        -:  412:    {
        2:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      253:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      253:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      110:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      110:  540:    state->deckCount[player] = state->discardCount[player];
      110:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      110:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      110:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      110:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      110:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      110:  561:    if (deckCounter == 0)
      110:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
      143:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      143:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      143:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      143:  578:    state->deckCount[player]--;
      143:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      143:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        5:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
       25:  660:	for (int i = 0; i <=3; i++) {
       20:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        5:  665:	discardCard(handPos, currentPlayer, state, 0);
        5:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       11:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       11:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       11:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      187:  680:	while (drawntreasure < 2) {
      165:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      110:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      165:  684:			drawCard(currentPlayer, state);
      165:  685:			cardDrawn =
      165:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      165:  687:							- 1]; //top card of hand is most recently drawn card.
      165:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       22:  689:				drawntreasure++;
        -:  690:			else {
      143:  691:				temphand[z] = cardDrawn;
      143:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      143:  693:				z++;
        -:  694:			}
        -:  695:		}
      165:  696:		while (z - 1 >= 0) {
      286:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      143:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      143:  699:			z = z - 1;
        -:  700:		}
       11:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       20:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       20:  791:  int currentPlayer = whoseTurn(state);
       20:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       20:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       20:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       20:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        1:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        1:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        1:  941:      discardCard(handPos, currentPlayer, state, 0);
        1:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        1:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        1: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        1: 1003:      discardCard(handPos, currentPlayer, state, 0);
        1: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
        8: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        8: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
        8: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        8: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        8: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        8: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        8: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        8: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        8: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        8: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
       13: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
       13: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
       78: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
       65: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
       48: 1370:	  state->coins += 1;
        -: 1371:	}
       17: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
       17: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
       13: 1383:  state->coins += bonus;
        -: 1384:
       13: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
cardtest2.c:
----------------- Testing Card: adventurer ----------------
TEST 1: Current player reveals cards until they find two treasure cards.
TEST 2: The two treasure cards are placed in the player’s hand
hand count = -3, expected = 4
deck count = 0, expected = 5
hand count failed
deck count failed
TEST 3: The cards should come from the player’s own pile.
hand count = -3, expected = 4
deck count = 0, expected = 5
hand count failed
deck count failed
TEST 4: No state change should occur for other players
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 5: The other revealed cards are discarded
discard count = 13, expected = 1
discard count failed
TEST 6: No state change should occur to the victory card piles and kingdom card piles
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province

 >>>>> SUCCESS: Testing complete adventurer <<<<<

File 'dominion.c'
Lines executed:40.18% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
      540:   10:int compare(const void* a, const void* b) {
      540:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      540:   13:  if (*(int*)a < *(int*)b)
      144:   14:    return -1;
      396:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       18:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       18:   46:  SelectStream(1);
       18:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       18:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       18:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      198:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     1980:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     1800:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       18:   75:  if (numPlayers == 2)
        -:   76:    {
       18:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       18:   89:  if (numPlayers == 2)
        -:   90:    {
       18:   91:      state->supplyCount[estate] = 8;
       18:   92:      state->supplyCount[duchy] = 8;
       18:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       18:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  104:  state->supplyCount[silver] = 40;
       18:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      378:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     2970:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     2790:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      180:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       52:  117:		  if (numPlayers == 2){ 
       26:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      154:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      180:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     2610:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       54:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       36:  142:      state->deckCount[i] = 0;
      144:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
      108:  145:	  state->deck[i][j] = estate;
      108:  146:	  state->deckCount[i]++;
        -:  147:	}
      288:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      252:  150:	  state->deck[i][j] = copper;
      252:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       54:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       36:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       54:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       36:  168:      state->handCount[i] = 0;
       36:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      504:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      486:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       18:  184:  state->outpostPlayed = 0;
       18:  185:  state->phase = 0;
       18:  186:  state->numActions = 1;
       18:  187:  state->numBuys = 1;
       18:  188:  state->playedCardCount = 0;
       18:  189:  state->whoseTurn = 0;
       18:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      108:  194:  for (it = 0; it < 5; it++){
       90:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       18:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       18:  200:  return 0;
        -:  201:}
        -:  202:
      376:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      376:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      376:  211:  if (state->deckCount[player] < 1)
      340:  212:    return -1;
       36:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      432:  216:  while (state->deckCount[player] > 0) {
      360:  217:    card = floor(Random() * state->deckCount[player]);
      360:  218:    newDeck[newDeckPos] = state->deck[player][card];
      360:  219:    newDeckPos++;
     1260:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      900:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      360:  223:    state->deckCount[player]--;
        -:  224:  }
      396:  225:  for (i = 0; i < newDeckPos; i++) {
      360:  226:    state->deck[player][i] = newDeck[i];
      360:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       36:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
       40:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       40:  328:  int count = 0;
        -:  329:
      340:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
      300:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
      140:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
      100:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
       40:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
       40:  345:  return count;
        -:  346:}
        -:  347:
       20:  348:int whoseTurn(struct gameState *state) {
       20:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        6:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        6:  408:	  j++;
        -:  409:	}
        -:  410:    }
        4:  411:  if ( j >= 3)
        -:  412:    {
        2:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      373:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      373:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      170:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      170:  540:    state->deckCount[player] = state->discardCount[player];
      170:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      170:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      170:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      170:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      170:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      170:  561:    if (deckCounter == 0)
      170:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
      203:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      203:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      203:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      203:  578:    state->deckCount[player]--;
      203:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      203:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        5:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
       25:  660:	for (int i = 0; i <=3; i++) {
       20:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        5:  665:	discardCard(handPos, currentPlayer, state, 0);
        5:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       17:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       17:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       17:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      289:  680:	while (drawntreasure < 2) {
      255:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      170:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      255:  684:			drawCard(currentPlayer, state);
      255:  685:			cardDrawn =
      255:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      255:  687:							- 1]; //top card of hand is most recently drawn card.
      255:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       34:  689:				drawntreasure++;
        -:  690:			else {
      221:  691:				temphand[z] = cardDrawn;
      221:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      221:  693:				z++;
        -:  694:			}
        -:  695:		}
      255:  696:		while (z - 1 >= 0) {
      442:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      221:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      221:  699:			z = z - 1;
        -:  700:		}
       17:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       20:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       20:  791:  int currentPlayer = whoseTurn(state);
       20:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       20:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       20:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       20:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        1:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        1:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        1:  941:      discardCard(handPos, currentPlayer, state, 0);
        1:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        1:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        1: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        1: 1003:      discardCard(handPos, currentPlayer, state, 0);
        1: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
        8: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        8: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
        8: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        8: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        8: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        8: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        8: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        8: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        8: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        8: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
       19: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
       19: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
      114: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
       95: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
       72: 1370:	  state->coins += 1;
        -: 1371:	}
       23: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
       23: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
       19: 1383:  state->coins += bonus;
        -: 1384:
       19: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
cardtest3.c:
----------------- Testing Card: village ----------------
TEST 1: Current player should receive exactly 1 card.
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 2: 1 card should come from the player’s own pile
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 3: No state change should occur for other players.
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 4: No state change should occur to the kingdom card piles.
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province
TEST 5: Current player receives 1 additional action.
actions = 3, expected = 2
Num actions failed

 >>>>> SUCCESS: Testing complete village <<<<<

File 'dominion.c'
Lines executed:40.18% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
      720:   10:int compare(const void* a, const void* b) {
      720:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      720:   13:  if (*(int*)a < *(int*)b)
      192:   14:    return -1;
      528:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       24:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       24:   46:  SelectStream(1);
       24:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       24:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       24:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      264:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     2640:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     2400:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       24:   75:  if (numPlayers == 2)
        -:   76:    {
       24:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       24:   89:  if (numPlayers == 2)
        -:   90:    {
       24:   91:      state->supplyCount[estate] = 8;
       24:   92:      state->supplyCount[duchy] = 8;
       24:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       24:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  104:  state->supplyCount[silver] = 40;
       24:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      504:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     3960:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     3720:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      240:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       64:  117:		  if (numPlayers == 2){ 
       32:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      208:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      240:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     3480:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       72:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       48:  142:      state->deckCount[i] = 0;
      192:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
      144:  145:	  state->deck[i][j] = estate;
      144:  146:	  state->deckCount[i]++;
        -:  147:	}
      384:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      336:  150:	  state->deck[i][j] = copper;
      336:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       72:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       48:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       72:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       48:  168:      state->handCount[i] = 0;
       48:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      672:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      648:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       24:  184:  state->outpostPlayed = 0;
       24:  185:  state->phase = 0;
       24:  186:  state->numActions = 1;
       24:  187:  state->numBuys = 1;
       24:  188:  state->playedCardCount = 0;
       24:  189:  state->whoseTurn = 0;
       24:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      144:  194:  for (it = 0; it < 5; it++){
      120:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       24:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       24:  200:  return 0;
        -:  201:}
        -:  202:
      388:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      388:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      388:  211:  if (state->deckCount[player] < 1)
      340:  212:    return -1;
       48:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      576:  216:  while (state->deckCount[player] > 0) {
      480:  217:    card = floor(Random() * state->deckCount[player]);
      480:  218:    newDeck[newDeckPos] = state->deck[player][card];
      480:  219:    newDeckPos++;
     1680:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
     1200:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      480:  223:    state->deckCount[player]--;
        -:  224:  }
      528:  225:  for (i = 0; i < newDeckPos; i++) {
      480:  226:    state->deck[player][i] = newDeck[i];
      480:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       48:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
       40:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       40:  328:  int count = 0;
        -:  329:
      340:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
      300:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
      140:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
      100:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
       40:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
       40:  345:  return count;
        -:  346:}
        -:  347:
       25:  348:int whoseTurn(struct gameState *state) {
       25:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        6:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        6:  408:	  j++;
        -:  409:	}
        -:  410:    }
        4:  411:  if ( j >= 3)
        -:  412:    {
        2:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      408:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      408:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      170:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      170:  540:    state->deckCount[player] = state->discardCount[player];
      170:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      170:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      170:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      170:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      170:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      170:  561:    if (deckCounter == 0)
      170:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
      238:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      238:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      238:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      238:  578:    state->deckCount[player]--;
      238:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      238:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        5:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
       25:  660:	for (int i = 0; i <=3; i++) {
       20:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        5:  665:	discardCard(handPos, currentPlayer, state, 0);
        5:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       17:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       17:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       17:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      289:  680:	while (drawntreasure < 2) {
      255:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      170:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      255:  684:			drawCard(currentPlayer, state);
      255:  685:			cardDrawn =
      255:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      255:  687:							- 1]; //top card of hand is most recently drawn card.
      255:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       34:  689:				drawntreasure++;
        -:  690:			else {
      221:  691:				temphand[z] = cardDrawn;
      221:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      221:  693:				z++;
        -:  694:			}
        -:  695:		}
      255:  696:		while (z - 1 >= 0) {
      442:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      221:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      221:  699:			z = z - 1;
        -:  700:		}
       17:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       25:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       25:  791:  int currentPlayer = whoseTurn(state);
       25:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       25:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       25:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       25:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        6:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        6:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        6:  941:      discardCard(handPos, currentPlayer, state, 0);
        6:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        1:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        1: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        1: 1003:      discardCard(handPos, currentPlayer, state, 0);
        1: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
       13: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
       13: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
       13: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       13: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
       13: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
       13: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
       13: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
       13: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
       13: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
       13: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
       13: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
       25: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
       25: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
      150: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
      125: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
       96: 1370:	  state->coins += 1;
        -: 1371:	}
       29: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
       29: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
       25: 1383:  state->coins += bonus;
        -: 1384:
       25: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
cardtest4.c:
----------------- Testing Card: great hall ----------------
TEST 1: Current player should receive exactly 1 card.
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 2: 1 card should come from the player’s own pile.
hand count = 5, expected = 5
deck count = 4, expected = 4
TEST 3: No state change should occur for other players.
hand count = 0, expected = 0
deck count = 10, expected = 10
TEST 4: No state change should occur to the victory card piles and kingdom card piles.
Test the kingdom cards
there should be 8 of each victory card - estate, duchy, and province
TEST 5: Current player receives 1  additional action.
actions = 2, expected = 3

 >>>>> SUCCESS: Testing complete great hall <<<<<

File 'dominion.c'
Lines executed:40.18% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Copy of clarkni dominion.c for testing purposes
        -:    9:
      900:   10:int compare(const void* a, const void* b) {
      900:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      900:   13:  if (*(int*)a < *(int*)b)
      240:   14:    return -1;
      660:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       30:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       30:   46:  SelectStream(1);
       30:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       30:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       30:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      330:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     3300:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     3000:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       30:   75:  if (numPlayers == 2)
        -:   76:    {
       30:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       30:   89:  if (numPlayers == 2)
        -:   90:    {
       30:   91:      state->supplyCount[estate] = 8;
       30:   92:      state->supplyCount[duchy] = 8;
       30:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       30:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       30:  104:  state->supplyCount[silver] = 40;
       30:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      630:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     4950:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     4650:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      300:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       76:  117:		  if (numPlayers == 2){ 
       38:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      262:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      300:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     4350:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       90:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       60:  142:      state->deckCount[i] = 0;
      240:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
      180:  145:	  state->deck[i][j] = estate;
      180:  146:	  state->deckCount[i]++;
        -:  147:	}
      480:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      420:  150:	  state->deck[i][j] = copper;
      420:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       90:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       60:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       90:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       60:  168:      state->handCount[i] = 0;
       60:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      840:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      810:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       30:  184:  state->outpostPlayed = 0;
       30:  185:  state->phase = 0;
       30:  186:  state->numActions = 1;
       30:  187:  state->numBuys = 1;
       30:  188:  state->playedCardCount = 0;
       30:  189:  state->whoseTurn = 0;
       30:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      180:  194:  for (it = 0; it < 5; it++){
      150:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       30:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       30:  200:  return 0;
        -:  201:}
        -:  202:
      400:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      400:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      400:  211:  if (state->deckCount[player] < 1)
      340:  212:    return -1;
       60:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      720:  216:  while (state->deckCount[player] > 0) {
      600:  217:    card = floor(Random() * state->deckCount[player]);
      600:  218:    newDeck[newDeckPos] = state->deck[player][card];
      600:  219:    newDeckPos++;
     2100:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
     1500:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      600:  223:    state->deckCount[player]--;
        -:  224:  }
      660:  225:  for (i = 0; i < newDeckPos; i++) {
      600:  226:    state->deck[player][i] = newDeck[i];
      600:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       60:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
       40:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       40:  328:  int count = 0;
        -:  329:
      340:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
      300:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
      140:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
      100:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
       40:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
       40:  345:  return count;
        -:  346:}
        -:  347:
       30:  348:int whoseTurn(struct gameState *state) {
       30:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        6:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        6:  408:	  j++;
        -:  409:	}
        -:  410:    }
        4:  411:  if ( j >= 3)
        -:  412:    {
        2:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      443:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      443:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      170:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      170:  540:    state->deckCount[player] = state->discardCount[player];
      170:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      170:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      170:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      170:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      170:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      170:  561:    if (deckCounter == 0)
      170:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
      273:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      273:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      273:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      273:  578:    state->deckCount[player]--;
      273:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      273:  582:  return 0;
        -:  583:}
        -:  584:
        5:  585:int getCost(int cardNumber)
        -:  586:{
        5:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        3:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        2:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:/* =============================
        -:  649:*      REFACTORED CARDS
        -:  650:*===============================
        -:  651:*/
        -:  652:
        -:  653:/* 
        -:  654: Refactored Smithy to make it a function and changed the termination condition
        -:  655: so that the player adds 4 cards to their hand
        -:  656:
        -:  657:*/
        5:  658:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  659:{  //+3 Cards
       25:  660:	for (int i = 0; i <=3; i++) {
       20:  661:			drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        5:  665:	discardCard(handPos, currentPlayer, state, 0);
        5:  666:	return 0;
        -:  667:}
        -:  668:/* 
        -:  669: Refactored Adventurer to make it a function and changed the card drawns such that
        -:  670: the player has a handicap such that the drawn treasure has to be including
        -:  671: (copper AND silver) OR gold instead of copper OR silver OR gold
        -:  672:
        -:  673:*/
        -:  674:
       17:  675:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int temphand[]){
       17:  676:	int drawntreasure = 0;
        -:  677:	int cardDrawn;
       17:  678:	int z = 0;  // this is the counter for the temp hand
        -:  679:	
      289:  680:	while (drawntreasure < 2) {
      255:  681:			if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
      170:  682:				shuffle(currentPlayer, state);
        -:  683:			}
      255:  684:			drawCard(currentPlayer, state);
      255:  685:			cardDrawn =
      255:  686:					state->hand[currentPlayer][state->handCount[currentPlayer]
      255:  687:							- 1]; //top card of hand is most recently drawn card.
      255:  688:			if (cardDrawn == (copper && cardDrawn == silver) || cardDrawn == gold)
       34:  689:				drawntreasure++;
        -:  690:			else {
      221:  691:				temphand[z] = cardDrawn;
      221:  692:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      221:  693:				z++;
        -:  694:			}
        -:  695:		}
      255:  696:		while (z - 1 >= 0) {
      442:  697:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      221:  698:					temphand[z - 1]; // discard all cards in play that have been drawn
      221:  699:			z = z - 1;
        -:  700:		}
       17:  701:		return 0;
        -:  702:}
        -:  703:
        -:  704:/* 
        -:  705: Refactored Steward to make it a function and changed all the trashFlags to 0 for choice2 and 3
        -:  706: to be "consistent with" the other trashFlag in discardCard function 
        -:  707:
        -:  708:*/
        -:  709:
    #####:  710:int cardEffectSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  711:	if (choice1 == 1) {
        -:  712:			//+2 cards
    #####:  713:			drawCard(currentPlayer, state);
    #####:  714:			drawCard(currentPlayer, state);
    #####:  715:		} else if (choice1 == 2) {
        -:  716:			//+2 coins
    #####:  717:			state->coins = state->coins + 2;
        -:  718:		} else {
        -:  719:			//trash 2 cards in hand
    #####:  720:			discardCard(choice2, currentPlayer, state, 0);
    #####:  721:			discardCard(choice3, currentPlayer, state, 0);
        -:  722:		}
        -:  723:
        -:  724:		//discard card from hand
    #####:  725:		discardCard(handPos, currentPlayer, state, 0);
    #####:  726:		return 0;
        -:  727:
        -:  728:}
        -:  729:/* 
        -:  730: Refactored embargo to make it a function and "forgot"
        -:  731: to include the discardCard function
        -:  732:*/		
        -:  733:
        -:  734:
    #####:  735:int cardEffectEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1){
        -:  736:	//+2 Coins
    #####:  737:		state->coins = state->coins + 2;
        -:  738:
        -:  739:		//see if selected pile is in play
    #####:  740:		if (state->supplyCount[choice1] == -1) {
    #####:  741:			return -1;
        -:  742:		}
        -:  743:
        -:  744:		//add embargo token to selected supply pile
    #####:  745:		state->embargoTokens[choice1]++;
        -:  746:
        -:  747:		//TODO
        -:  748:		//trash card
        -:  749:		
    #####:  750:		return 0;
        -:  751:}
        -:  752:
        -:  753:/* 
        -:  754: Refactored Council_room to make it a function and changed the drawCard option to allow
        -:  755: the player to add 5 cards to their hand, instead of 4
        -:  756:
        -:  757:*/
        -:  758:
        1:  759:int cardEffectCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  760:	//+4 Cards
        -:  761:	int i;
        6:  762:	for (i = 0; i <= 4; i++) {
        5:  763:		drawCard(currentPlayer, state);
        -:  764:	}
        -:  765:
        -:  766:		//+1 Buy
        1:  767:	state->numBuys++;
        -:  768:
        -:  769:		//Each other player draws a card
        3:  770:	for (i = 0; i < state->numPlayers; i++) {
        2:  771:		if (i != currentPlayer) {
        1:  772:			drawCard(i, state);
        -:  773:			}
        -:  774:		}
        -:  775:
        -:  776:		//put played card in played card pile
        1:  777:		discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        1:  779:		return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
       30:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
       30:  791:  int currentPlayer = whoseTurn(state);
       30:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
       30:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
        -:  796:  //int drawntreasure=0;
        -:  797:  //int cardDrawn;
        -:  798: // int z = 0;// this is the counter for the temp hand
       30:  799:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  800:    nextPlayer = 0;
        -:  801:  }
        -:  802:  
        -:  803:	
        -:  804:  //uses switch to select card and perform actions
       30:  805:  switch( card ) 
        -:  806:    {
        -:  807:    case adventurer:
       11:  808:      return	cardEffectAdventurer(currentPlayer, state, temphand);
        -:  809:			
        -:  810:    case council_room:
        1:  811:      return cardEffectCouncilRoom(currentPlayer, state, handPos);
        -:  812:			
        -:  813:    case feast:
        -:  814:      //gain card with cost up to 5
        -:  815:      //Backup hand
        7:  816:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  817:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  818:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  819:      }
        -:  820:      //Backup hand
        -:  821:
        -:  822:      //Update Coins for Buy
        1:  823:      updateCoins(currentPlayer, state, 5);
        1:  824:      x = 1;//Condition to loop on
        3:  825:      while( x == 1) {//Buy one card
        1:  826:	if (supplyCount(choice1, state) <= 0){
        -:  827:	  if (DEBUG)
        -:  828:	    printf("None of that card left, sorry!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  832:	  }
        -:  833:	}
        1:  834:	else if (state->coins < getCost(choice1)){
    #####:  835:	  printf("That card is too expensive!\n");
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  839:	  }
        -:  840:	}
        -:  841:	else{
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        1:  847:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  848:	  x = 0;//No more buying cards
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  852:	  }
        -:  853:
        -:  854:	}
        -:  855:      }     
        -:  856:
        -:  857:      //Reset Hand
        7:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  859:	state->hand[currentPlayer][i] = temphand[i];
        6:  860:	temphand[i] = -1;
        -:  861:      }
        -:  862:      //Reset Hand
        -:  863:      			
        1:  864:      return 0;
        -:  865:			
        -:  866:    case gardens:
        1:  867:      return -1;
        -:  868:			
        -:  869:    case mine:
        1:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
        1:  872:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:		
        1:  877:      if (choice2 > treasure_map || choice2 < curse)
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
        1:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  883:	{
        1:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      gainCard(choice2, state, 2, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
    #####:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
    #####:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
    #####:  897:	      discardCard(i, currentPlayer, state, 0);			
    #####:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:			
    #####:  902:      return 0;
        -:  903:			
        -:  904:    case remodel:
        1:  905:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  906:
        1:  907:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  908:	{
        1:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      gainCard(choice2, state, 0, currentPlayer);
        -:  913:
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
        -:  916:
        -:  917:      //discard trashed card
    #####:  918:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  919:	{
    #####:  920:	  if (state->hand[currentPlayer][i] == j)
        -:  921:	    {
    #####:  922:	      discardCard(i, currentPlayer, state, 0);			
    #####:  923:	      break;
        -:  924:	    }
        -:  925:	}
        -:  926:
        -:  927:
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case smithy:
        1:  931:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
        6:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
        6:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
        6:  941:      discardCard(handPos, currentPlayer, state, 0);
        6:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
        1:  945:      state->numBuys++;//Increase buys by 1!
        1:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
        1:  983:	if (supplyCount(estate, state) > 0){
        1:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  985:	  state->supplyCount[estate]--;//Decrement Estates
        1:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
        1:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
        6:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
        6: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
        6: 1003:      discardCard(handPos, currentPlayer, state, 0);
        6: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      return cardEffectSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
        -: 1200:		}
        -: 1201:					
        -: 1202:	    }
        -: 1203:				
        -: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:		
        -: 1212:    case embargo: 
    #####: 1213:      return cardEffectEmbargo(currentPlayer, state, handPos, choice1);
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
       18: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
       18: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
       18: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       18: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
       18: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
       18: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
       18: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
       18: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
       18: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
       18: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
       18: 1318:  return 0;
        -: 1319:}
        -: 1320:
        2: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        2: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        2: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        2: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        2: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
       31: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
       31: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
      186: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
      155: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
      120: 1370:	  state->coins += 1;
        -: 1371:	}
       35: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
       35: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
       31: 1383:  state->coins += bonus;
        -: 1384:
       31: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
